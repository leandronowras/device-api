{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Feature: Define Device Domain Model",
        "description": "Introduce canonical Device resource with fields and constraints.",
        "details": "Given a need to manage devices\nWhen defining the domain model\nThen the Device entity must have: id (server-generated), name (required), brand (required), state (available|in-use|inactive, default available), creation_time (server-generated, immutable)\nAnd indexes should exist for brand and state\n",
        "testStrategy": "",
        "subtasks": [],
        "status": "done",
        "updatedAt": "2025-10-25T19:40:03.941Z",
        "dependencies": []
      },
      {
        "id": 2,
        "title": "Feature: Create a new device (POST /v1/devices)",
        "description": "Allow clients to register a new device with required fields and optional state.",
        "details": "Given the service accepts POST /v1/devices\nWhen a valid payload with name, brand (and optional state) is sent\nThen the API persists the device and returns 201 with the resource\nAnd creation_time is set by the server\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-27T23:48:48.273Z"
      },
      {
        "id": 3,
        "title": "Feature: Fetch a single device (GET /v1/devices/{id})",
        "description": "Retrieve a device by its id.",
        "details": "Given an existing device id\nWhen GET /v1/devices/{id}\nThen return 200 with the full resource\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-27T23:49:15.558Z"
      },
      {
        "id": 4,
        "title": "Feature: List devices with pagination (GET /v1/devices)",
        "description": "List all devices with keyset pagination and default ordering by creation_time desc.",
        "details": "Given multiple devices exist\nWhen GET /v1/devices?limit=50\nThen respond 200 with data[] and page.next_cursor when more results exist\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-27T23:49:45.310Z"
      },
      {
        "id": 5,
        "title": "Feature: Filter devices by brand",
        "description": "Support brand filtering via query parameter.",
        "details": "Given devices from multiple brands exist\nWhen GET /v1/devices?brand=Apple\nThen only devices with brand 'Apple' are returned\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-27T23:49:50.078Z"
      },
      {
        "id": 6,
        "title": "Feature: Filter devices by state",
        "description": "Support state filtering via query parameter.",
        "details": "Given devices in different states exist\nWhen GET /v1/devices?state=in-use\nThen only devices with state 'in-use' are returned\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-27T23:50:00.337Z"
      },
      {
        "id": 7,
        "title": "Feature: Fully update a device (PUT /v1/devices/{id})",
        "description": "Replace mutable fields of a device with domain guards enforced.",
        "details": "Given a device exists\nWhen PUT /v1/devices/{id} with name, brand, state\nThen update succeeds unless domain rules forbid changes\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-27T23:50:24.403Z"
      },
      {
        "id": 8,
        "title": "Feature: Partially update a device (PATCH /v1/devices/{id})",
        "description": "Modify a subset of fields with same domain guards as PUT.",
        "details": "Given a device exists\nWhen PATCH /v1/devices/{id} with any subset of name, brand, state\nThen update succeeds unless domain rules forbid changes\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-27T23:51:00.181Z"
      },
      {
        "id": 9,
        "title": "Feature: Delete a device (DELETE /v1/devices/{id})",
        "description": "Delete a device with restriction when state is in-use.",
        "details": "Given a device exists\nWhen DELETE /v1/devices/{id}\nThen deletion succeeds unless device is in-use\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-27T23:52:28.058Z"
      },
      {
        "id": 10,
        "title": "Feature: Enforce domain validations",
        "description": "Globally enforce immutability of creation_time and guard name/brand when in-use.",
        "details": "Given any update operation\nWhen creation_time is provided or name/brand is modified while device is in-use\nThen the request is rejected or ignored per API contract and stored values remain consistent\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-25T20:07:35.430Z"
      },
      {
        "id": 11,
        "title": "Feature: Persistence with non in-memory database",
        "description": "Use a real database to store devices; include migrations.",
        "details": "Given the service is deployed\nWhen the API restarts\nThen devices remain persisted in the chosen database and schema migrations can be applied safely\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-28T00:58:40.757Z"
      },
      {
        "id": 12,
        "title": "Feature: API Documentation (OpenAPI + Docs)",
        "description": "Expose an OpenAPI 3.1 spec and interactive docs endpoint.",
        "details": "Given the API is running\nWhen a user visits /openapi.yaml or /docs\nThen the full spec and interactive documentation are available and accurate to the implementation\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-28T17:18:32.777Z"
      },
      {
        "id": 13,
        "title": "Feature: Health and Readiness Probes",
        "description": "Expose /healthz and /readyz endpoints for operations.",
        "details": "Given the platform monitors the service\nWhen it calls /healthz and /readyz\nThen /healthz reports process liveness and /readyz verifies DB connectivity/migrations\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "cancelled",
        "updatedAt": "2025-10-28T10:32:07.705Z"
      },
      {
        "id": 14,
        "title": "Feature: Containerization",
        "description": "Provide Dockerfile and container image to run the service.",
        "details": "Given a standard container runtime\nWhen building the image\nThen the service runs as a non-root user and exposes the API on a configurable port\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-28T01:13:17.781Z"
      },
      {
        "id": 15,
        "title": "Feature: Reasonable Test Coverage",
        "description": "Provide unit and integration tests for domain rules, handlers, and persistence.",
        "details": "Given CI runs the test suite\nWhen tests execute\nThen coverage meets the agreed threshold and critical paths are exercised\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-28T00:58:40.756Z"
      },
      {
        "id": 16,
        "title": "Feature: Repository & Delivery",
        "description": "Deliver as a Git repository with granular commits and clear instructions.",
        "details": "Given project scaffolding exists\nWhen pushing to remote repository\nThen commits are granular with meaningful messages and the repository omits any prohibited brand references\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-28T17:05:15.572Z"
      },
      {
        "id": 17,
        "title": "Feature: Go 1.23+ Compliance",
        "description": "Ensure the project builds and runs with Go 1.23 or newer.",
        "details": "Given a machine with Go 1.23+\nWhen running the build command\nThen the application compiles without errors and starts successfully\n",
        "testStrategy": "",
        "subtasks": [],
        "dependencies": [],
        "status": "done",
        "updatedAt": "2025-10-28T00:58:40.746Z"
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastModified": "2025-10-28T17:18:32.779Z",
      "taskCount": 17,
      "completedCount": 16,
      "tags": [
        "master"
      ],
      "created": "2025-10-28T17:19:24.750Z",
      "description": "Tasks for master context"
    }
  }
}